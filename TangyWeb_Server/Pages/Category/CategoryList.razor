@page "/category"

@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click">
</_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">
            Category List
        </h4>
    </div>

    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">
            Add New Category
        </a>
    </div>

    <div class="col-12 p-3">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var obj in Categories)
                    {
                        <tr>
                            <td>@obj.Name</td>

                            <td>
                                <NavLink href="@($"category/edit/{obj.ID}")" class="btn btn-primary">
                                    Edit
                                </NavLink>

                                <NavLink class="btn btn-danger" @onclick="() => HandleDelete(obj.ID)">
                                    Delete
                                </NavLink>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            @if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif" />
                </div>
            }
            else
            {
                <p>No records found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; }
    private int DeleteCategoryID { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();

        Categories = await _categoryRepository.GetAll();

        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryID = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;

        if (isConfirmed && DeleteCategoryID != 0)
        {
            //delete
            await _categoryRepository.Delete(DeleteCategoryID);
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }

        IsLoading = false;
    }
}
